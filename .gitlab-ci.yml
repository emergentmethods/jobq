# NOTE: The following variables are required for this pipeline to work
# GIT_COMMIT_USER: The username of the gitlab user that will be used to push tags
# GIT_COMMIT_EMAIL: The email of the gitlab user that will be used to push tags

image: golang:1.21

stages:
  - lint
  - test
  - bump
  - version
  - build
  - release
  - deploy


# Pipeline rules
workflow:
  rules:
      # Prevent running a push pipeline for a release commit that's not a tag
    - if: $CI_COMMIT_MESSAGE =~ /^chore\(release\):.*/ && $CI_COMMIT_TAG == null
      when: never
      # If a push to branch with open merge request then ignore
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
      # If source is push and no open merge request then run
    - if: $CI_COMMIT_BRANCH
      # Run tag pipelines
    - if: $CI_COMMIT_TAG


default:
  cache: &global_cache
    key: 'main'
    paths:
      - .cache
      - ./task
    policy: pull-push


before_script:
  - export GOPATH=${CI_PROJECT_DIR}/.cache
  - export PATH=${GOPATH}/bin:${PATH}
  - export PATH=$PATH:$(pwd)


.only_tag: &only_tag
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: never


.no_tag: &no_tag
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success


.only_protected: &only_protected
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      when: on_success
    - when: never


# Anchor for docker jobs
.docker-job:
  image: docker:latest
  services:
    - docker:dind
  tags:
    - gitlab-org-docker
  # Deactivate cache for docker jobs
  cache: []


variables: {}


# Setup job to install dependencies
build-env:
  stage: .pre
  tags:
    - gitlab-org-docker
  script:
    - go mod download
    # Install go-task
    - sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b .
  rules:
      # If project dependencies were changed then run
    - changes:
      - go.mod
      - go.sum
      when: always
      # If cache exists then skip
    - exists:       
      - .cache
      when: never
    # Default to manual, but continue
    # pipeline if not run
    - when: manual
      allow_failure: true


lint-commit:
  <<: *no_tag
  stage: lint
  tags:
    - gitlab-org-docker
  image: python:3.11
  script:
    - |
      # Get the commit message of the last commit
      commit_message=$(git log -1 --pretty=format:%s)

      # If the commit message starts with "Merge branch", it is a merge commit, so skip the linting.
      if [[ $commit_message == 'Merge branch'* ]]; then
        echo "Merge commit detected, skipping lint."
        exit 0
      fi

      pip install gitlint
      # Ensure the commit message is valid
      # We should always pass this as long as the pusher has the pre-commit hooks installed
      # but just as a sanity check we'll run it here
      git log -1 --pretty=%B | gitlint


lint-code:
  <<: *no_tag
  stage: lint
  tags:
    - gitlab-org-docker
  script:
      # Ensure the code is formatted correctly
    - task lint


unit-tests:
  <<: *no_tag
  stage: test
  tags:
    - gitlab-org-docker
  script:
    # Run tests
    - go get github.com/boumenot/gocover-cobertura
    - task test
    - go run github.com/boumenot/gocover-cobertura < coverage.out > coverage.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml


bump-version:
  <<: *only_protected
  tags:
    - gitlab-org-docker
  variables:
    REPO_URL: "https://release-token:${RELEASE_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
  stage: bump
  before_script:
      # Add global before_script commands since they are overwritten here
    - export PATH=$PATH:$(pwd)
      # Set git info
    - git config --global user.email "$GIT_COMMIT_EMAIL"
    - git config --global user.name "$GIT_COMMIT_USER"
      # NOTE: Must be set to CLONE strategy in gitlab CI otherwise there will be
      # excess commits and tags from a dirty cache
    - git checkout $CI_COMMIT_BRANCH
    - git pull $REPO_URL $CI_COMMIT_BRANCH
      # Explicitly checkout branch since gitlab CI detaches
  script:
    # Push new tag to trigger release workflow if bumped
    - |
      if ! task bump-version; then
        echo "Version unchanged."
      else
        echo "Version changed."
        git push $REPO_URL $CI_COMMIT_BRANCH --tags
      fi


get-version:
  <<: *only_tag
  stage: version
  tags:
    - gitlab-org-docker
  script:
    # Create release.env
    - echo "VERSION=$(task version)" >> release.env
    # Ensure the file is formatted correctly
    - cat release.env
  artifacts:
    reports:
      dotenv: release.env


make-release:
  <<: *only_tag
  stage: release
  tags:
    - gitlab-org-docker
  needs:
    - job: get-version
      artifacts: true
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Building release $VERSION"
  release:
    name: Release $VERSION
    tag_name: "v$VERSION"
    description: $CHANGELOG
